# -*- coding: utf-8 -*-
"""RDF.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eeRhiA2uxGoZkcr5k-5b_K91E4u7nCoe
"""

# pip install rdflib

# Классы (RDF Types):
#  • Dialogue — диалог
#  • Utterance — реплика
#  • Speaker — спикер
#  • Emotion — эмоция
#  • Sentiment — сентимент

# Свойства (RDF predicates):
#  • hasSpeaker — реплику произнёс спикер
#  • hasText — текст реплики
#  • hasStartTime, hasEndTime — временные метки
#  • hasAudioFile — путь к аудиофайлу
#  • hasEmotion, hasSentiment
#  • hasAddressee — адресат
#  • partOfDialogue — принадлежит диалогу

import pandas as pd
from rdflib import Graph, Namespace, Literal, RDF, URIRef
import ast

# Загрузка CSV в DataFrame
df = pd.read_csv("utterances.csv")

# Пространство имён
EX = Namespace("http://example.org/emotion#")

# Создание графа
g = Graph()
g.bind("ex", EX)

# Добавление данных
for _, row in df.iterrows():
    utt_id = f"utterance_{row['utterance_id']}"
    utt_uri = EX[utt_id]

    g.add((utt_uri, RDF.type, EX.Utterance))
    g.add((utt_uri, EX.dialogueID, Literal(row['dialogue_id'])))
    g.add((utt_uri, EX.localUtteranceID, Literal(row['local_utterance_id'])))
    g.add((utt_uri, EX.season, Literal(row['season'])))
    g.add((utt_uri, EX.episode, Literal(row['episode'])))
    g.add((utt_uri, EX.speaker, Literal(row['speaker'])))
    g.add((utt_uri, EX.utteranceText, Literal(row['utterance'])))
    g.add((utt_uri, EX.emotion, Literal(row['emotion'])))
    g.add((utt_uri, EX.sentiment, Literal(row['sentiment'])))
    g.add((utt_uri, EX.audioFile, Literal(row['audio_file'])))
    g.add((utt_uri, EX.startTime, Literal(row['start_time'])))
    g.add((utt_uri, EX.endTime, Literal(row['end_time'])))

    # Адресация (связь между utterance и targets)
    if pd.notna(row['targets']) and row['targets'] != "None":
        try:
            targets = ast.literal_eval(row['targets'])  # строка → список
            for target_id in targets:
                target_uri = EX[f"utterance_{target_id}"]
                g.add((utt_uri, EX.addresses, target_uri))
        except:
            pass

import networkx as nx
import matplotlib.pyplot as plt

# Конвертация RDF-графа в NetworkX граф
G = nx.DiGraph()
for s, p, o in g:
    G.add_edge(str(s).replace(EX, "ex:"), str(o).replace(EX, "ex:"), label=str(p).replace(EX, "ex:"))

# Отображение графа
plt.figure(figsize=(18, 12))
pos = nx.spring_layout(G, seed=42)
edge_labels = nx.get_edge_attributes(G, 'label')

nx.draw(G, pos, with_labels=True, node_color='lightblue', node_size=3000, font_size=9, arrows=True)
nx.draw_networkx_edge_labels(G, pos, edge_labels=edge_labels, font_color='red', font_size=8)

plt.title("RDF-граф диалогов, эмоций и адресации")
plt.axis('off')
plt.tight_layout()
plt.show()

q1 = """
PREFIX ex: <http://example.org/emotion#>

SELECT ?utterance ?text
WHERE {
  ?utterance ex:emotion "surprise" .
  ?utterance ex:utteranceText ?text .
}
"""

for row in g.query(q1):
    print(f"Utterance URI: {row.utterance}, Text: {row.text}")

q2 = """
PREFIX ex: <http://example.org/emotion#>

SELECT ?utterance ?text
WHERE {
  ?utterance ex:speaker "Chandler" .
  ?utterance ex:utteranceText ?text .
}
"""


for row in g.query(q2):
    print(f"Utterance URI: {row.utterance}, Text: {row.text}")